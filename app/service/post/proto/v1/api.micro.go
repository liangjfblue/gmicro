// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: api.proto

package gmicro_srv_post

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for PostArticleSrv service

type PostArticleSrvService interface {
	PostArticle(ctx context.Context, in *PostArticleRequest, opts ...client.CallOption) (*PostArticleRespond, error)
	GetArticle(ctx context.Context, in *GetArticleRequest, opts ...client.CallOption) (*GetArticleRespond, error)
	DelArticle(ctx context.Context, in *DelArticleRequest, opts ...client.CallOption) (*DelArticleRespond, error)
}

type postArticleSrvService struct {
	c    client.Client
	name string
}

func NewPostArticleSrvService(name string, c client.Client) PostArticleSrvService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "gmicro.srv.post"
	}
	return &postArticleSrvService{
		c:    c,
		name: name,
	}
}

func (c *postArticleSrvService) PostArticle(ctx context.Context, in *PostArticleRequest, opts ...client.CallOption) (*PostArticleRespond, error) {
	req := c.c.NewRequest(c.name, "PostArticleSrv.PostArticle", in)
	out := new(PostArticleRespond)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postArticleSrvService) GetArticle(ctx context.Context, in *GetArticleRequest, opts ...client.CallOption) (*GetArticleRespond, error) {
	req := c.c.NewRequest(c.name, "PostArticleSrv.GetArticle", in)
	out := new(GetArticleRespond)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postArticleSrvService) DelArticle(ctx context.Context, in *DelArticleRequest, opts ...client.CallOption) (*DelArticleRespond, error) {
	req := c.c.NewRequest(c.name, "PostArticleSrv.DelArticle", in)
	out := new(DelArticleRespond)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PostArticleSrv service

type PostArticleSrvHandler interface {
	PostArticle(context.Context, *PostArticleRequest, *PostArticleRespond) error
	GetArticle(context.Context, *GetArticleRequest, *GetArticleRespond) error
	DelArticle(context.Context, *DelArticleRequest, *DelArticleRespond) error
}

func RegisterPostArticleSrvHandler(s server.Server, hdlr PostArticleSrvHandler, opts ...server.HandlerOption) error {
	type postArticleSrv interface {
		PostArticle(ctx context.Context, in *PostArticleRequest, out *PostArticleRespond) error
		GetArticle(ctx context.Context, in *GetArticleRequest, out *GetArticleRespond) error
		DelArticle(ctx context.Context, in *DelArticleRequest, out *DelArticleRespond) error
	}
	type PostArticleSrv struct {
		postArticleSrv
	}
	h := &postArticleSrvHandler{hdlr}
	return s.Handle(s.NewHandler(&PostArticleSrv{h}, opts...))
}

type postArticleSrvHandler struct {
	PostArticleSrvHandler
}

func (h *postArticleSrvHandler) PostArticle(ctx context.Context, in *PostArticleRequest, out *PostArticleRespond) error {
	return h.PostArticleSrvHandler.PostArticle(ctx, in, out)
}

func (h *postArticleSrvHandler) GetArticle(ctx context.Context, in *GetArticleRequest, out *GetArticleRespond) error {
	return h.PostArticleSrvHandler.GetArticle(ctx, in, out)
}

func (h *postArticleSrvHandler) DelArticle(ctx context.Context, in *DelArticleRequest, out *DelArticleRespond) error {
	return h.PostArticleSrvHandler.DelArticle(ctx, in, out)
}
